{
  "version": 3,
  "sources": [
    "node_modules/browser-pack/_prelude.js",
    "client-js/pages.js",
    "lib/anti.js",
    "lib/comparator-default.js",
    "lib/comparator-numberish.js",
    "lib/comparator-sku.js",
    "lib/first-characters-only.js",
    "lib/numberish-only.js",
    "lib/tablesort.js"
  ],
  "names": [],
  "mappings": "AAAA;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA",
  "file": "generated.js",
  "sourceRoot": "",
  "sourcesContent": [
    "(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()",
    "window.require = require\nconst Tablesort = require('../lib/tablesort')\n\nlet table = new Tablesort(document.querySelector('#example'))\n\n// let tri = require('tripartite')\n\n\n// load templates like\n//require('../views/test1.tri')\n\n// and use like:\n/*\nlet d = document.createElement('div')\nd.innerHTML = tri.getTemplate('views/test1')({\n\tkey1: 'value'\n\t, key2: 'value'\n})\ndocument.body.append(d)\n*/\n\n\n\n\n\n",
    "/**\n * Creates a comparator based on another comparator which has the opposite\n * sort order.\n * @param {function} comparator \n * @returns \n */\nfunction anti(comparator) {\n\treturn function(valueOne, valueTwo, cellOne, cellTwo) {\n\t\treturn -1 * comparator(valueOne, valueTwo, cellOne, cellTwo)\n\t}\n}\n\nmodule.exports = anti",
    "function comparator(valueOne, valueTwo, cellOne, cellTwo) {\n\tvalueOne = valueOne.trim()\n\tvalueTwo = valueTwo.trim()\n\tif(valueOne == '' && valueTwo == '') {\n\t\treturn 0\n\t}\n\tif(valueOne == '') {\n\t\treturn -1\n\t}\n\tif(valueTwo == '') {\n\t\treturn 1\n\t}\n\treturn valueOne.toLowerCase().localeCompare(valueTwo.toLowerCase())\n}\n\nmodule.exports = comparator",
    "const numberishOnly = require('./numberish-only')\n\nfunction comparator(valueOne, valueTwo, cellOne, cellTwo) {\n\tlet [one, two] = [valueOne, valueTwo].map(numberishOnly).map(parseFloat)\n\tif(Number.isNaN(one) && Number.isNaN(two)) {\n\t\treturn 0\n\t}\n\tif(Number.isNaN(one)) {\n\t\treturn -1\n\t}\n\tif(Number.isNaN(two)) {\n\t\treturn 1\n\t}\n\tif(one < two) {\n\t\treturn -1\n\t}\n\tif(one > two) {\n\t\treturn 1\n\t}\n\treturn 0\n}\nmodule.exports = comparator",
    "const numberishOnly = require('./numberish-only')\n// const charactersOnly = require('./characters-only')\nconst firstCharactersOnly = require('./first-characters-only')\n\nfunction trim(val) {\n\treturn val.trim()\n}\n\nfunction comparator(valueOne, valueTwo, cellOne, cellTwo) {\n\tlet [one, two] = [valueOne, valueTwo].map(trim).map(firstCharactersOnly).map(trim)\n\tif(!one && two) {\n\t\treturn -1\n\t}\n\tif(one && !two) {\n\t\treturn 1\n\t}\n\t\n\tlet diff = one.toLowerCase().localeCompare(two.toLowerCase())\n\tif(diff != 0) {\n\t\treturn diff\n\t}\n\t\n\t[one, two] = [valueOne, valueTwo].map(numberishOnly).map(trim).map(parseFloat)\n\tif(Number.isNaN(one) && Number.isNaN(two)) {\n\t\treturn 0\n\t}\n\tif(Number.isNaN(one)) {\n\t\treturn -1\n\t}\n\tif(Number.isNaN(two)) {\n\t\treturn 1\n\t}\n\tif(one < two) {\n\t\treturn -1\n\t}\n\tif(one > two) {\n\t\treturn 1\n\t}\n\treturn 0\n}\nmodule.exports = comparator",
    "function firstCharactersOnly(val) {\n\tif (val) {\n\t\tif(typeof val !== 'string') {\n\t\t\tval = val.toString()\n\t\t}\n\t\tlet match = val.match(/^[a-zA-Z]+/)\n\t\tif(!match) {\n\t\t\treturn ''\n\t\t}\n\t\treturn match[0]\n\t}\n\treturn ''\n}\n\nmodule.exports = firstCharactersOnly",
    "function numberishOnly(val) {\n\tif (val) {\n\t\tif(typeof val !== 'string') {\n\t\t\tval = val.toString()\n\t\t}\n\t\treturn val.replace(/[^0123456789\\-.]/g, '')\n\t}\n\treturn ''\n}\n\nmodule.exports = numberishOnly",
    "let comparatorDefault = require('./comparator-default')\nlet comparatorNumberish = require('./comparator-numberish')\nlet comparatorSku = require('./comparator-sku')\n\nconst anti = require('./anti')\n\nclass Tablesort {\n\tconstructor(tableElement, options = {}) {\n\t\tthis.tableElement = tableElement\n\t\tthis.options = Object.assign({}, options)\n\t\t\n\t\tthis.options.comparators = Object.assign({\n\t\t\tdefault: comparatorDefault\n\t\t\t, numberish: comparatorNumberish\n\t\t\t, sku: comparatorSku\n\t\t}, this.options.comparators)\n\t\t\n\t\tlet headers = tableElement.querySelectorAll('th:not(.no-sort)')\n\t\tfor(let header of headers) {\n\t\t\theader.addEventListener('click', this.headerClick.bind(this))\n\t\t}\n\t}\n\t\n\theaderClick(evt) {\n\t\tlet header = evt.currentTarget\n\t\tlet position = Array.from(header.parentNode.children).indexOf(header)\n\t\tlet reverse = header.getAttribute('aria-sort') == 'forward' ? true : false\n\t\tthis.tableElement.querySelectorAll('th').forEach(cell => cell.removeAttribute('aria-sort'))\n\t\theader.setAttribute('aria-sort', reverse ? 'reverse' : 'forward')\n\t\t\n\n\t\tlet comparatorName = header.getAttribute('data-comparator') || 'default'\n\t\tlet comparator = this.options.comparators[comparatorName] || this.options.comparators.default\n\t\tif(reverse) {\n\t\t\tcomparator = anti(comparator)\n\t\t}\n\n\t\tthis.sort(position, comparator)\n\t}\n\t\n\tsort(position, comparator = this.options.comparators.default) {\n\t\tlet tbody = this.tableElement.querySelector('tbody')\n\t\tlet rows = Array.from(tbody.querySelectorAll('tr'))\n\t\trows.sort((one, two) => {\n\t\t\tlet cellOne = one.children[position]\n\t\t\tlet cellTwo = two.children[position]\n\n\t\t\treturn comparator(cellOne.innerText, cellTwo.innerText, cellOne, cellTwo)\n\t\t})\n\t\tfor(let row of rows) {\n\t\t\ttbody.appendChild(row)\n\t\t}\n\t}\n\t\n\n\n}\n\nmodule.exports = Tablesort"
  ]
}